<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
     
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
     
  <meta http-equiv="Content-Style-Type" content="text/css">
      
  <link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
  <title>Compiling Java code</title>
          
  <link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body>
<h2> Compiling Java code</h2>
<p> The JDT plug-ins include an incremental and batch Java compiler for building 
Java .class files from source code. There is no direct API provided by the 
compiler. It is installed as a builder on Java projects. Compilation is triggered 
using standard platform build mechanisms.</p>
<p> The platform build mechanism is described in detail in <a href="../../org.eclipse.platform.doc.isv/guide/resAdv_builders.htm" class="XRef">
 Incremental project builders</a>.</p>
<h3> Compiling code</h3>
<p> You can programmatically compile the Java source files in a project using 
the build API.</p>
<pre><font color="#4444cc">
   IProject myProject;
   IProgressMonitor myProgressMonitor;
   myProject.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, myProgressMonitor);
</font></pre>
<p>For a Java project, this invokes the Java incremental project builder
 (along with any other incremental project builders that have been added
to the project's build spec). The generated .class files are written to
the designated output folder. Additional resource files are also copied to the output folder.&nbsp;</p>
<p>In the case of a full batch build, all the
.class files in the output folder may be 'scrubbed' to ensure that no stale
files are found. This is controlled using a JDT Core Builder Option (<a href="../reference/api/org/eclipse/jdt/core/JavaCore.html#CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER">CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER</a>).&nbsp;
The default for this option is to clean output folders.&nbsp; Unless this option
is reset, you must ensure that you place all .class files for which
you do not have corresponding source files in a separate class file folder
on the classpath  instead of the output folder.</p>
<p>The
incremental and batch builders can be configured with other options that
control which resources are copied to the output folder.&nbsp; The following sample shows how to set up a resource filter so that files ending with '.ignore' and folders named 'META-INF',
are not copied to the output folder:</p>
<pre><font color="#4444cc">
   Hashtable options = JavaCore.getOptions();
   options.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, &quot;*.ignore,META-INF/&quot;);
   JavaCore.setOptions(options);
</font></pre>
<p> Filenames are filtered out if they match one of the supplied patterns. Entire 
folders are filtered out if their name matches one of the supplied folder names 
which end in a path separator.</p>
<p> The incremental and batch builders can also be configured to only generate
 a single error when the .classpath file has errors. This option is set by
 default and eliminates numerous errors.&nbsp; See <a href="jdt_api_options.htm#builder">JDT
Core Builder Options</a> for a complete list of builder-related options and
their defaults. </p>
<p>The compiler can also be configured using <a href="../reference/api/org/eclipse/jdt/core/JavaCore.html"><b>JavaCore</b></a>
options.&nbsp; For example, you can define the severity that should be used for
different kinds of problems that are found during compilation.&nbsp; See <a href="jdt_api_options.htm#compiler">JDT
Core Compiler Options </a>for a complete list of compiler-related options and their defaults. </p>
<p>When programmatically configuring options for the builder or compiler, you
should specify the scope of the option.&nbsp; For example, setting up a
resource filter may apply to a particular project only:</p>
<pre><font color="#4444cc">
   Hashtable options = myProject.getOptions(false);  // get only the options set up in this project
   options.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, &quot;*.ignore,META-INF/&quot;);
   myProject.setOptions(options);
</font>
</pre>
<h3>Using the batch compiler</h3>

<h4>Finding the batch compiler</h4>

<p>The batch compiler class is located in the JDT Core plug-in.
The name of the class is <i>org.eclipse.jdt.compiler.batch.BatchCompiler</i>.
It is packaged into <code>plugins/org.eclipse.jdt.core_3.4.0.&lt;qualifier&gt;.jar</code>. Since 3.2, it is also available as a separate download.
The name of the file is <code>ecj.jar</code>. Its corresponding source is also available. To get them, go to the <a href="http://download.eclipse.org/eclipse/downloads/">download page</a> and 
search for the section <b>JDT Core Batch Compiler</b>. This jar contains the batch compiler and the javac ant adapter.</p>
<p>Since 3.3, this jar also contains the support for jsr199 (Compiler API) and the support for jsr269 (Annotation processing). <b>In order to use the annotations
processing support, a 1.6 VM is required.</b></p>
<p>So it can be used as a standalone application and inside an Ant build outside of Eclipse.</p>
<h4>Running the batch compiler</h4>
<ul>
<li>From the command line.
<p><code><font color="#3366FF">java -jar org.eclipse.jdt.core_3.4.0&lt;qualifier&gt;.jar -classpath rt.jar A.java</font></code></p>
<p>or:</p>
<p><code><font color="#3366FF">java -jar ecj.jar -classpath rt.jar A.java</font></code></p>
</li>
<li>Using the static <code>compile(String commandLine, PrintWriter outWriter, PrintWriter errWriter, CompilationProgress progress)</code> method of the class BatchCompiler.
<pre><font color="#3366FF">
org.eclipse.jdt.compiler.CompilationProgress progress = null; // instantiate your subclass
org.eclipse.jdt.internal.compiler.batch.BatchCompiler.compile(
   "-classpath rt.jar A.java",
   new PrintWriter(System.out),
   new PrintWriter(System.err),
   progress);
</font></pre><p>
You can control how progress is reported, or how the batch compiler is canceled, by subclassing the class <i>org.eclipse.jdt.compiler.CompilationProgress</i>.
</p></li>
</ul>

<h4>Which options are available?</h4>
<p>
The recommended options have an orange background.
</p>
<p>When some options are being set multiple times, the batch compiler consumes them from left to right. When the warning option (-warn:....) is used without 
'+' or '-', this overrides the set of warnings previously specified. So the user should make sure that such an option is given before
any other usage of the -warn option.
</p>
<p>Same applies for the -err: option.</p>
<table BORDER CELLSPACING="2" CELLPADDING="2">
<tr>
<th>Name</th>
<th colspan="3">Usage</th>
</tr>
<tr>
<th colspan="4">Classpath options</th>
</tr>
<tr>
<td valign=top bgcolor="#FFCCAA" width="250">-bootclasspath &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top bgcolor="#FFCCAA" colspan="3">This is a list of directories or jar files used to bootstrap the class files used by the compiler. By default the libraries of the running
VM are used. Entries are separated by the platform path separator.
<br>Each directory or file can specify access rules for types between '[' and ']'.
<p>If no bootclasspath is specified, the compiler will infer it using the following system properties <code>sun.boot.class.path</code>,
<code>vm.boot.class.path</code> or <code>org.apache.harmony.boot.class.path</code> in this order respectively.</p>
</td>
</tr>
<tr>
<td valign="top" bgcolor="#FFCCAA" width="250">-cp<br>-classpath &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top bgcolor="#FFCCAA" colspan="3">This is a list of directories or jar files used to compile the source files. The default value is the value of the property "java.class.path".
 Entries are separated by the platform path separator.
<br>Each directory or file can specify access rules for types between '[' and ']' (e.g. [-X] to forbid access to type X, [~X] to 
discourage access to type X, [+p/X:-p/*] to forbid access to all types in package p but allow access to p/X).
<br>The compiler follows the <code>Class-Path</code> clauses of jar files' 
manifests recursively and appends each referenced jar file to the end of the 
classpath, provided it is not on the classpath yet.
</td>
</tr>
<tr>
<td valign=top width="250">-extdirs &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top colspan="3">This is a list of directories used to specify the location of extension zip/jar files. Entries are separated by the platform path separator.</td>
</tr>
<tr>
<td valign=top width="250">-endorseddirs &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top colspan="3">This is a list of directories used to specify the location of endorsed zip/jar files. Entries are separated by the platform path separator.</td>
</tr>
<tr>
<td valign=top width="250">-sourcepath &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top colspan="3">This is a list of directories used to specify the source files. Entries are separated by the platform path separator.
<br>Each directory can specify access rules for types between '[' and ']'.</td>
</tr>
<tr>
<td valign=top bgcolor="#FFCCAA" width="250">-d &lt;dir 1&gt;|none</td>
<td bgcolor="#FFCCAA" colspan="3">This is used to specify in which directory the generated .class files should be dumped. If it is omitted, no package directory structure is created.<br>
If you want to generate no .class file at all, use <font color="#3366FF">-d none</font>.</td>
</tr>
<tr>
<td valign=top width="250">-encoding &lt;encoding name&gt;</td>
<td colspan="3">Specify default encoding for all source files. Custom encoding can also be specified on a per file basis by suffixing each input source file/folder name with <font color="#3366FF">[&lt;encoding name&gt;]</font>. 
For example <font color="#3366FF">X.java[utf8]</font> would specify the <code>UTF-8</code> encoding for the compilation unit
X.java located in the current user directory.<p>If multiple default source file encodings are specified, the last one will be used.</p>
<p>For example:</p>
<ul>
<li>
<font color="#3366FF"><code>... -encoding UTF-8 X.java[Cp1252] Y.java[UTF-16] Z.java ....</code></font><br>
All source files will be read using UTF-8 encoding (this includes <font color="#3366FF">Z.java</font>). <font color="#3366FF">X.java</font> 
will be read using Cp1252 encoding and <font color="#3366FF">Y.java</font> will be read
using UTF-16 encoding.
</li>
<li>
<font color="#3366FF"><code>... -encoding UTF-8 -encoding UTF-16 ....</code></font><br>
All source files will be read using UTF-16 encoding. The -encoding option for UTF-8 is ignored.
</li>
<li>
<font color="#3366FF"><code>... -encoding Cp1252 /foo/bar/X.java[UTF-16] /foo/bar[UTF-8] ....</code></font><br>
All source files will be read using Cp1252 encoding. X.java is the only file inside the /foo/bar directory to be read using 
the encoding UTF-16. All other files in that directory will use UTF-8 encoding.
</li>
</ul></td>
</tr>
<tr>
<th colspan="4">Compliance options</th>
</tr>
<tr>
<td valign=top width="250">-target 1.1 to 1.7 or (5, 5.0, etc)</td>
<td colspan="3">This specifies the .class file target setting.
The possible value are:
<ul>
<li><font color="#3366FF">1.1</font> (major version: 45 minor: 3)</li>
<li><font color="#3366FF">1.2</font> (major version: 46 minor: 0)</li>
<li><font color="#3366FF">1.3</font> (major version: 47 minor: 0)</li>
<li><font color="#3366FF">1.4</font> (major version: 48 minor: 0)</li>
<li><font color="#3366FF">1.5</font>, <font color="#3366FF">5</font> or <font color="#3366FF">5.0</font> (major version: 49 minor: 0)</li>
<li><font color="#3366FF">1.6</font>, <font color="#3366FF">6</font> or <font color="#3366FF">6.0</font> (major version: 50 minor: 0)</li>
<li><font color="#3366FF">1.7</font>, <font color="#3366FF">7</font> or <font color="#3366FF">7.0</font> (major version: 51 minor: 0)</li>
</ul>
Defaults are:
<ul>
<li><font color="#3366FF">1.1</font> in <font color="#3366FF">-1.3</font> mode</li>
<li><font color="#3366FF">1.2</font> in <font color="#3366FF">-1.4</font> mode</li>
<li><font color="#3366FF">1.5</font> in <font color="#3366FF">-1.5</font> mode</li>
<li><font color="#3366FF">1.6</font> in <font color="#3366FF">-1.6</font> mode</li>
<li><font color="#3366FF">1.7</font> in <font color="#3366FF">-1.7</font> mode</li>
</ul>
<p>clcd1.1 can be used to generate the StackMap attribute.</p>
</td>
</tr>
<tr>
<td valign=top>-1.3</td>
<td colspan="3">Set compliance level to <font color="#3366FF">1.3</font>. Implicit -source 1.3 -target 1.1.</td>
</tr>
<tr>
<td valign=top>-1.4</td>
<td colspan="3">Set compliance level to <font color="#3366FF">1.4</font> (default). Implicit -source 1.3 -target 1.2.</td>
</tr>
<tr>
<td valign=top>-1.5</td>
<td colspan="3">Set compliance level to <font color="#3366FF">1.5</font>. Implicit -source 1.5 -target 1.5.</td>
</tr>
<tr>
<td valign=top>-1.6</td>
<td colspan="3">Set compliance level to <font color="#3366FF">1.6</font>. Implicit -source 1.6 -target 1.6.</td>
</tr>
<tr>
<td valign=top>-1.7</td>
<td colspan="3">Set compliance level to <font color="#3366FF">1.7</font>. Implicit -source 1.7 -target 1.7.</td>
</tr>
<tr>
<td valign=top width="250">-source 1.1 to 1.7 or (5, 5.0, etc)</td>
<td colspan="3">This is used to specify the source level expected by the compiler.<br>
The possible value are:
<ul>
<li><font color="#3366FF">1.3</font></li>
<li><font color="#3366FF">1.4</font></li>
<li><font color="#3366FF">1.5</font>, <font color="#3366FF">5</font> or <font color="#3366FF">5.0</font></li>
<li><font color="#3366FF">1.6</font>, <font color="#3366FF">6</font> or <font color="#3366FF">6.0</font></li>
<li><font color="#3366FF">1.7</font>, <font color="#3366FF">7</font> or <font color="#3366FF">7.0</font></li>
</ul>
Defaults are:
<ul>
<li><font color="#3366FF">1.3</font> in <font color="#3366FF">-1.3</font> mode</li>
<li><font color="#3366FF">1.3</font> in <font color="#3366FF">-1.4</font> mode</li>
<li><font color="#3366FF">1.5</font> in <font color="#3366FF">-1.5</font> mode</li>
<li><font color="#3366FF">1.6</font> in <font color="#3366FF">-1.6</font> mode</li>
<li><font color="#3366FF">1.7</font> in <font color="#3366FF">-1.7</font> mode</li>
</ul>
In <font color="#3366FF">1.4</font>, <font color="#3366FF"><I>assert</I></font> is treated as a keyword. In <font color="#3366FF">1.5</font>
and <font color="#3366FF">1.6</font>, <font color="#3366FF"><I>enum</I></font> and <font color="#3366FF"><i>assert</i></font> are treated as a keywords.</td>
</tr>
<tr>
<th colspan="4">Warning options</th>
</tr>
<tr>
<td valign=top>-?:warn -help:warn</td>
<td colspan="3">Display advanced warning options</td>
</tr>
<tr>
<td valign=top width="250" rowspan="67">-warn:...
</td>
<td valign=top colspan="3">Specify the set of enabled warnings.<br>e.g. <font color="#3366FF">-warn:unusedLocal,deprecation</font><br>
<table>
<tr>
<td>-warn:none</td><td>disable all warnings</td>
</tr>
<tr>
<td>-warn:&lt;warning tokens separated by ,&gt;</td><td>enable exactly the listed warnings</td>
</tr>
<tr>
<td>-warn:+&lt;warning tokens separated by ,&gt;</td><td>enable additional warnings</td>
</tr>
<tr>
<td>-warn:-&lt;warning tokens separated by ,&gt;</td><td>disable specific warnings</td>
</tr>
</table>
</td>
</tr>
<tr>
<th align=center width="50">Default</th>
<th align=left width="150">Token name</th>
<th align=left>Description</th>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>allDeadCode</td>
<td valign=top>dead code including trivial if(DEBUG) check</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>allDeprecation</td>
<td valign=top>deprecation even inside deprecated code</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>allJavadoc</td>
<td valign=top>invalid or missing javadoc</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>allOver-ann</td>
<td valign=top>all missing @Override annotations (superclass and superinterfaces)</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>assertIdentifier</td>
<td valign=top>occurrence of <i>assert</i> used as identifier</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>boxing</td>
<td valign=top>autoboxing conversion</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>charConcat</td>
<td valign=top>when a char array is used in a string concatenation without being converted explicitly to a string</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>compareIdentical</td>
<td valign=top>comparing identical expressions</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>conditionAssign</td>
<td valign=top>possible accidental boolean assignment</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>constructorName</td>
<td valign=top>method with constructor name</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>deadCode</td>
<td valign=top>dead code excluding trivial if (DEBUG) check</td>
</tr><tr>
<td align=center valign=top>-</td>
<td align=left valign=top>dep-ann</td>
<td valign=top>missing @Deprecated annotation</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>deprecation</td>
<td valign=top>usage of deprecated type or member outside deprecated code</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>discouraged</td>
<td valign=top>use of types matching a discouraged access rule</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>emptyBlock</td>
<td valign=top>undocumented empty block</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>enumIdentifier</td>
<td valign=top>occurrence of <i>enum</i> used as identifier</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>enumSwitch</td>
<td valign=top>incomplete enum switch</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>fallthrough</td>
<td valign=top>possible fall-through case</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>fieldHiding</td>
<td valign=top>field hiding another variable</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>finalBound</td>
<td valign=top>type parameter with final bound</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>finally</td>
<td valign=top>finally block not completing normally</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>forbidden</td>
<td valign=top>use of types matching a forbidden access rule</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>hashCode</td>
<td valign=top>missing hashCode() method when overriding equals()</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>hiding</td>
<td valign=top>macro for fieldHiding, localHiding, typeHiding and maskedCatchBlock</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>indirectStatic</td>
<td valign=top>indirect reference to static member</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>intfAnnotation</td>
<td valign=top>annotation type used as super interface</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>intfNonInherited</td>
<td valign=top>interface non-inherited method compatibility</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>intfRedundant</td>
<td valign=top>find redundant superinterfaces</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>javadoc</td>
<td valign=top>invalid javadoc</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>localHiding</td>
<td valign=top>local variable hiding another variable</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>maskedCatchBlock</td>
<td valign=top>hidden catch block</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>nls</td>
<td valign=top>non-nls string literals (lacking of tags //$NON-NLS-&lt;n&gt;)</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>noEffectAssign</td>
<td valign=top>assignment with no effect</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>null</td>
<td valign=top>potential missing or redundant null check</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>nullDereference</td>
<td valign=top>missing null check</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>over-ann</td>
<td valign=top>missing @Override annotation (superclass only)</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>paramAssign</td>
<td valign=top>assignment to a parameter</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>pkgDefaultMethod</td>
<td valign=top>attempt to override package-default method</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>raw</td>
<td valign=top>usage a of raw type (instead of a parameterized type)</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>semicolon</td>
<td valign=top>unnecessary semicolon or empty statement</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>serial</td>
<td valign=top>missing serialVersionUID</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>specialParamHiding</td>
<td valign=top>constructor or setter parameter hiding another field</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>static-access</td>
<td valign=top>macro for indirectStatic and staticReceiver</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>staticReceiver</td>
<td valign=top>if a non static receiver is used to get a static field or call a static method</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>super</td>
<td valign=top>overriding a method without making a super invocation</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>suppress</td>
<td valign=top>enable @SuppressWarnings</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>syncOverride</td>
<td valign=top>missing synchronized in synchronized method override</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>syntheticAccess</td>
<td valign=top>when performing synthetic access for innerclass</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>tasks</td>
<td valign=top>enable support for tasks tags in source code</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>typeHiding</td>
<td valign=top>type parameter hiding another type</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unchecked</td>
<td valign=top>unchecked type operation</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unnecessaryElse</td>
<td valign=top>unnecessary else clause</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unqualifiedField</td>
<td valign=top>unqualified reference to field</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unused</td>
<td valign=top>macro for unusedAllocation, unusedArgument, unusedImport, unusedLabel, unusedLocal, unusedPrivate and unusedThrown</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unusedAllocation</td>
<td valign=top>allocating an object that is not used</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unusedArgument</td>
<td valign=top>unused method argument</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unusedImport</td>
<td valign=top>unused import reference</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unusedLabel</td>
<td valign=top>unused label</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unusedLocal</td>
<td valign=top>unused local variable</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unusedPrivate</td>
<td valign=top>unused private member declaration</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>unusedThrown</td>
<td valign=top>unused declared thrown exception</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>unusedTypeArgs</td>
<td valign=top>unused type arguments for method</td>
</tr>
<tr>
<td align=center valign=top>-</td>
<td align=left valign=top>uselessTypeCheck</td>
<td valign=top>unnecessary cast/instanceof operation</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>varargsCast</td>
<td valign=top>varargs argument need explicit cast</td>
</tr>
<tr>
<td align=center valign=top>+</td>
<td align=left valign=top>warningToken</td>
<td valign=top>unhandled warning token in @SuppressWarnings</td>
</tr>
<tr>
<td valign=top>-nowarn</td>
<td colspan="3">No warning (equivalent to <font color="#3366FF">-warn:none</font>)</td>
</tr>
<tr>
<td valign=top width="250">-err:...
</td>
<td valign=top colspan="3">Specify the set of enabled warnings that are converted to errors.
<br>e.g. <font color="#3366FF">-err:unusedLocal,deprecation</font><br>
unusedLocal and deprecation warnings will be converted to errors. All other warnings are still reported as warnings.
<table>
<tr>
<td>-err:&lt;warning tokens separated by ,&gt;</td><td>convert exactly the listed warnings to errors</td>
</tr>
<tr>
<td>-err:+&lt;warning tokens separated by ,&gt;</td><td>convert additional warnings to errors</td>
</tr>
<tr>
<td>-err:-&lt;warning tokens separated by ,&gt;</td><td>remove specific warnings from being converted to errors</td>
</tr>
</table>
</td>
</tr>
<tr>
<td valign=top>-deprecation</td>
<td colspan="3">Equivalent to <font color="#3366FF">-warn:+deprecation</font>.</td>
</tr>
<tr>
<td valign=top>-properties &lt;file&gt;</td>
<td colspan="3">Set warnings/errors option based on the properties file contents.
This option can be used with -nowarn, -err:.. or -warn:.. options, but the last one on the 
command line sets the options to be used.<br>
<p>The properties file contents can be generated by setting project specific settings on an existing java project
and using the file in <code>.settings/org.eclipse.jdt.core.prefs</code> file as a properties file, or
a simple text file that is defined entry/value pairs using the constants defined in the 
<code>org.eclipse.jdt.core.JavaCore</code> class.</p>
<pre>
...
org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
org.eclipse.jdt.core.compiler.problem.assertIdentifier=warning
org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
...
</pre>
</td>
</tr>
<tr>
<th colspan="4">Debug options</th>
</tr>
<tr>
<td valign=top>-g[:none|:lines,vars,source]
</td>
<td colspan="3">Set the debug attributes level<br>
<table>
<tr>
<th align=left>-g</th>
<td colspan="3">All debug info (equivalent to <font color="#3366FF">-g:lines,vars,source</font>)
</td>
</tr>
<tr>
<th align=left>-g:none</th>
<td colspan="3">No debug info</td>
</tr>
<tr>
<th align=left>-g:[lines,vars,source]</th>
<td colspan="3">Selective debug info</td>
</tr>
</table>
</td>
</tr>
<tr>
<td valign=top>-preserveAllLocals</td>
<td colspan="3">Explicitly request the compiler to preserve all local variables (for debug purpose). If omitted, the compiler will remove unused locals.</td>
</tr>
<tr>
<th colspan="4">Annotation processing options (require a 1.6 VM or above and are used only if the compliance is 1.6)</th>
</tr>
<tr>
<td>-Akey[=value]</td>
<td valign=top colspan="3">Annotation processors options that are passed to annotation processors. <code>key</code> is made of identifiers separated by dots</td>
</tr>
<tr>
<td>-proc:[only|none]</td>
<td valign=top colspan="3">If <code>-proc:only</code> is specified, the annotation processors will run but
no compilation will be performed. If <code>-proc:none</code> is specified, annotation processors
will not be discovered or run; compilation will proceed as if no annotation processors
were found. By default the compiler must search the classpath for annotation
processors, so specifying <code>-proc:none</code> may speed compilation if annotation processing is
not required.</td>
</tr>
<tr>
<td>-processor &lt;class1[,class2,...]&gt;</td>
<td valign=top colspan="3">Qualified class names of annotation processors to run. If specified, the normal
<a href="http://java.sun.com/javase/6/docs/api/javax/annotation/processing/Processor.html">
processor discovery process</a> will be skipped.</td>
</tr>
<tr>
<td>-processorpath &lt;dir&nbsp;1&gt;;&lt;dir&nbsp;2&gt;;...;&lt;dir&nbsp;P&gt;</td>
<td valign=top colspan="3">A list of directories or jar files which will be searched for annotation processors. 
Entries are separated by the platform path separator. If not specified, the classpath will be searched instead.</td>
</tr>
<tr>
<td>-s &lt;dir&gt;</td>
<td valign=top colspan="3">The directory where generated source files will be created.</td>
</tr>
<tr>
<td>-XprintProcessorInfo</td>
<td valign=top colspan="3">Print information about which annotations and which elements a processor is asked to process</td>
</tr>
<tr>
<td>-XprintRounds</td>
<td valign=top colspan="3">Print information about annotation processing rounds</td>
</tr>
<tr>
<td>-classNames &lt;class1[,class2,...]&gt;</td>
<td valign=top colspan="3">Qualified names of binary types that need to be processed</td>
</tr>
<tr>
<th colspan="4">Ignored options (for compatibility with javac options)</th>
</tr>
<tr>
<td>-J&lt;option&gt;</td>
<td valign=top colspan="3">Pass option to the virtual machine</td>
</tr>
<tr>
<td>-X&lt;option&gt;</td>
<td valign=top colspan="3">Specify non-standard option. -Xemacs is not ignored.</td>
</tr>
<tr>
<td>-X</td>
<td valign=top colspan="3">Print non-standard options and exit</td>
</tr>
<tr>
<td>-O</td>
<td valign=top colspan="3">Optimize for execution time</td>
</tr>
<tr>
<th colspan="4">Advanced options</th>
</tr>
<tr>
<td>@&lt;file&gt;</td>
<td valign=top colspan="3">Read command-line arguments from file</td>
</tr>
<tr>
<td>-maxProblems&nbsp;&lt;n&gt;</td>
<td valign=top colspan="3">Max number of problems per compilation unit (100 by default)</td>
</tr>
<tr>
<td valign=top>-log &lt;filename&gt;</td>
<td colspan="3">Specify a log file in which all output from the compiler will be dumped. This is really useful if you want to debug the batch
compiler or get a file which contains all errors and warnings from a batch build. If the extension is <b>.xml</b>, the generated log
will be an xml file.
</td>
</tr>
<tr>
<td valign=top>-Xemacs</td>
<td colspan="3">Use emacs style to present errors and warnings locations into the console
    and regular text logs. XML logs are unaffected by this option. With this option
    active, the message:
    <br><code><font color="#3366FF">
2. WARNING in /workspace/X.java<br>
 (at line 8)...</font></code><br>is presented as:
    <br><code><font color="#3366FF">
/workspace/X.java:8: warning: The method...</font></code></td>
</tr>
<tr>
<td valign=top>-proceedOnError[:Fatal]</td>
<td colspan="3">Keep compiling in spite of errors, dumping class files with problem methods or problem types.
This is recommended only if you want to be able to run your application even if you have remaining errors.<br>
With ":Fatal", all optional errors are treated as fatal and this leads to code that will abort if an error is reached at
runtime. Without ":Fatal", optional errors don't prevent the proper code generation and the produced .class files can
be run without a problem.</td>
</tr>
<tr>
<td valign=top>-verbose</td>
<td colspan="3">Print accessed/processed compilation units in the console or the log file if specified.</td>
</tr>
<tr>
<td valign=top>-referenceInfo</td>
<td colspan="3">Compute reference info. This is useful only if connected to the builder. The reference infos are useless otherwise.</td>
</tr>
<tr>
<td valign=top>-progress</td>
<td colspan="3">Show progress (only in -log mode).</td>
</tr>
<tr>
<td valign=top>-time
</td>
<td colspan="3">Display speed information.</td>
</tr>
<tr>
<td valign=top>-noExit</td>
<td colspan="3">Do not call <font color="#3366FF">System.exit(n)</font> at end of compilation (<font color="#3366FF">n=0</font> if no error).</td>
</tr>
<tr>
<td valign=top>-repeat &lt;n&gt;
</td>
<td colspan="3">Repeat compilation process <font color="#3366FF">&lt;n&gt;</font> times (perf analysis).</td>
</tr>
<tr>
<td valign=top>-inlineJSR</td>
<td colspan="3">Inline JSR bytecode (implicit if target &gt;= 1.5).</td>
</tr>
<tr>
<td valign=top>-enableJavadoc</td>
<td colspan="3">Consider references inside javadoc.</td>
</tr>
<tr>
<th colspan="4">Helping options</th>
</tr>
<tr>
<td>-? -help</td>
<td valign=top colspan="3">Display the help message.</td>
</tr>
<tr>
<td valign=top>-v -version</td>
<td colspan="3">Display the build number of the compiler. This is very useful to report a bug.</td>
</tr>
<tr>
<td valign=top>-showversion</td>
<td colspan="3">Display the build number of the compiler and continue. This is very useful to report a bug.</td>
</tr>
</table>
<h4>Examples</h4>
<table>
<tr>
<td valign=top><code><font color="#3366FF">d:\temp -classpath rt.jar -time -g -d d:/tmp</font></code>
</td>
<td valign=top>It compiles all source files in d:\temp and its subfolders. The classpath is simply rt.jar. It generates all debug
attributes and all generated .class files are dumped in d:\tmp. The speed of the compiler will be displayed once the batch process
is completed.</td>
</tr>
<tr>
<td valign=top><code><font color="#3366FF">d:\temp\Test.java -classpath d:\temp;rt.jar -g:none</font></code>
</td>
<td valign=top>It compiles only Test.java and its dependant files if any, retrieving dependant files from d:\temp. The classpath is d:\temp followed by rt.jar, which means that all necessary classes
are searched first in d:\temp and then in rt.jar. It generates no debug attributes and all generated .class files are dumped in d:\temp.</td>
</tr>
</table>
<h3>Using the ant javac adapter</h3>
<p>The Eclipse compiler can be used inside an Ant buildfile using the javac adapter. 
In order to use the Eclipse compiler, you simply need to define the <b>build.compiler</b>
 property in your buildfile.</p>
<p>In order to get the batch compiler working in an ant buildfile, the ant runtime classpath needs to contain the 
Eclipse batch compiler. When you run your ant buildfile:</p>
<ol>
<li>outside of Eclipse: the easiest way to set up the ant runtime classpath is to add the <code>ecj.jar</code> file using the <code>-lib</code>
argument or dumping it inside the <code>ANT_HOME</code> location.</li>
<li>inside Eclipse using the same JRE than Eclipse: the Eclipse batch compiler is implicitly added to the ant runtime
classpath.</li>
<li>inside Eclipse using the different JRE: the Eclipse batch compiler must be explicitly added to the ant runtime classpath.
This can be done using the <code>ecj.jar</code> file or using the org.eclipse.jdt.core jar file and the <code>jdtCompilerAdapter.jar</code> file located inside the
org.eclipse.jdt.core jar file (this jar file needs to be extracted first).</li>
</ol>
<p>Here is a small example:</p>
<pre><font color="#4444cc">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project name=&quot;compile&quot; default=&quot;main&quot; basedir=&quot;../.&quot;&gt;

	<b>&lt;property name=&quot;build.compiler&quot; value=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot;/&gt;</b>

	&lt;property name=&quot;root&quot; value=&quot;${basedir}/src&quot;/&gt;

	&lt;property name=&quot;destdir&quot; value=&quot;d:/temp/bin&quot; /&gt;

	&lt;target name=&quot;main&quot;&gt;
		&lt;javac srcdir=&quot;${root}&quot; destdir=&quot;${destdir}&quot; debug=&quot;on&quot; nowarn=&quot;on&quot; extdirs=&quot;d:/extdirs&quot; source=&quot;1.4&quot;&gt;
		    &lt;classpath&gt;
		      &lt;pathelement location=&quot;${basedir}/../org.eclipse.jdt.core/bin&quot;/&gt;
		    &lt;/classpath&gt;
		&lt;/javac&gt;
	&lt;/target&gt;
&lt;/project&gt;
</font>
</pre><p>The syntax used for the javac Ant task can be found in the <a href="http://ant.apache.org/manual/Tasks/javac.html">
 Ant javac task documentation</a>. The current adapter supports the Javac Ant task 1.4.1 up to 1.6.5 versions.</p>
<p>If you are using a version above 1.5.0, you can use the nested compiler argument element (<code>&lt;compilerarg&gt;</code>) to specify compiler
specific options.
</p>
<pre><font color="#4444cc">
...
&lt;javac srcdir=&quot;${root}&quot; destdir=&quot;${destdir}&quot; debug=&quot;on&quot; nowarn=&quot;on&quot; extdirs=&quot;d:/extdirs&quot; source=&quot;1.4&quot;&gt;
    &lt;classpath&gt;
      &lt;pathelement location=&quot;${basedir}/../org.eclipse.jdt.core/bin&quot;/&gt;
    &lt;/classpath&gt;
    &lt;compilerarg</font> <font color="red">compiler=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot;</font> <font color="#4444cc">line=&quot;-1.5 -warn:+boxing&quot;/&gt;
&lt;/javac&gt;
...
</font>
</pre>
<b>Note:</b>
<ol>
<li>To prevent compiler dependant buildfiles, we <u>strongly</u> advise you to use a <code>&lt;compilerarg&gt;</code> whose "compiler" attribute value is <code>org.eclipse.jdt.core.JDTCompilerAdapter</code>.
If this is not set, the buildfile can only be used with the Eclipse compiler. If set, the nested compiler argument is ignored if the name is different from the 
compiler name specified by the <code>build.compiler</code> property.</li>
<li><code>&lt;compilerarg&gt;</code> should not be used to set values like target value, source value, debug options, or any options that could be set using the
defined attributes of the <code>javac</code> ant task. Its usage must be reserved to pass
compiler specific options like warning options. When a command-line argument is specified more than once, the Eclipse batch compiler can report errors like:
<pre>duplicate target compliance setting specification: 1.5</pre>
</li>
</ol>
<h3> Problem determination</h3>
<p> JDT Core defines a specialized marker (marker type "<b>org.eclipse.jdt.core.problem</b>
  ") to denote compilation problems. To programmatically discover problems
 detected by the compiler, the standard platform marker protocol should be
 used. See <a href="../../org.eclipse.platform.doc.isv/guide/resAdv_markers.htm" class="XRef">
 Resource Markers</a>
  for an overview of using markers.</p>
<p> The following snippet finds all Java problem markers in a compilation 
unit.</p>
<pre><font color="#4444cc">
   public IMarker[] findJavaProblemMarkers(ICompilationUnit cu) 
      throws CoreException {
      IResource javaSourceFile = cu.getUnderlyingResource();
      IMarker[] markers = 
         javaSourceFile.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER,
            true, IResource.DEPTH_INFINITE);
   }
</font>
</pre><p> Java problem markers are maintained by the Java project builder and are 
removed automatically as problems are resolved and the Java source is recompiled.</p>
<p>The problem id value is set to one of the constants defined in <b><a href="../reference/api/org/eclipse/jdt/core/compiler/IProblem.html">
 IProblem</a>
</b>. The problem's id is reliable, but the message is localized and therefore 
can be changed according to the default locale. The constants defined in <b><a href="../reference/api/org/eclipse/jdt/core/compiler/IProblem.html">
 IProblem</a>
</b> are self-descriptive. </p>
<p>An implementation of <b><a href="../reference/api/org/eclipse/jdt/core/IProblemRequestor.html">
 IProblemRequestor</a>
</b> should be defined to collect the problems discovered during a Java operation. 
  Working copies can be reconciled with problem detection if a <b><a href="../reference/api/org/eclipse/jdt/core/IProblemRequestor.html">
 IProblemRequestor</a>
</b> has been supplied for the working copy creation. To achieve this, you 
can use the <b><a href="../reference/api/org/eclipse/jdt/core/ICompilationUnit.html#reconcile(int, boolean, org.eclipse.jdt.core.WorkingCopyOwner, org.eclipse.core.runtime.IProgressMonitor)">
 reconcile</a></b> method. Here is an example:</p>
<pre><font color="#4444cc">
  ICompilationUnit unit = ..; // get some compilation unit
			
  // create requestor for accumulating discovered problems
  IProblemRequestor problemRequestor = new IProblemRequestor() {
    public void acceptProblem(IProblem problem) {
      System.out.println(problem.getID() + &quot;: &quot; + problem.getMessage());
    }
    public void beginReporting() {}
    public void endReporting() {}
    public boolean isActive() {	return true; } // will detect problems if active
  };
    
  // use working copy to hold source with error
  ICompilationUnit workingCopy = unit.getWorkingCopy(new WorkingCopyOwner() {}, problemRequestor, null);
  ((IOpenable)workingCopy).getBuffer().setContents(&quot;public class X extends Zork {}&quot;);

  // trigger reconciliation			
  workingCopy.reconcile(NO_AST, true, null, null);
</font></pre>
<p>You can add an action on the reported problems in the acceptProblem(IProblem) 
method. In this example, the reported problem will be that <b>Zork cannot 
be resolved or is not a valid superclass</b> and its id is <b>IProblem.SuperclassNotFound</b>.
</p>
<h3>Excluding warnings using <code>SuppressWarnings</code></h3>
<p>Java 5.0 offers the option to the user to disable compilation warnings relative to a subset of a compilation unit using
the annotation <code>java.lang.SuppressWarning</code>.</p>
<pre>
	@SuppressWarning("unused") public void foo() {
		String s;
	}
</pre>
<p>Without the annotation, the compiler would complain that the local variable <code>s</code> is never used.
With the annotation, the compiler silently ignores this warning locally to the <code>foo</code> method. This enables to
keep the warnings in other locations of the same compilation unit or the same project.</p>
<p>The list of tokens that can be used inside an <code>SuppressWarning</code> annotation is:</p>
<!-- cross-checked with the code for 3.2 RC4 by maxime 20060517 -->
<ul>
<li><font color="green">all</font> to suppress all warnings</li>
<li><font color="green">boxing</font> to suppress warnings relative to boxing/unboxing operations</li>
<li><font color="green">cast</font> to suppress warnings relative to cast operations</li>
<li><font color="green">dep-ann</font> to suppress warnings relative to deprecated annotation</li>
<li><font color="green">deprecation</font> to suppress warnings relative to deprecation</li>
<li><font color="green">fallthrough</font> to suppress warnings relative to missing breaks in switch statements</li>
<li><font color="green">finally</font> to suppress warnings relative to finally block that don't return</li>
<li><font color="green">hiding</font> to suppress warnings relative to locals that hide variable</li>
<li><font color="green">incomplete-switch</font> to suppress warnings relative to missing entries in a switch statement (enum case)</li>
<li><font color="green">nls</font> to suppress warnings relative to non-nls string literals</li>
<li><font color="green">null</font> to suppress warnings relative to null analysis</li>
<li><font color="green">raw</font> to suppress warnings relative to usage of raw types</li>
<li><font color="green">restriction</font> to suppress warnings relative to usage of discouraged or forbidden references</li>
<li><font color="green">serial</font> to suppress warnings relative to missing serialVersionUID field for a serializable class</li>
<li><font color="green">static-access</font> to suppress warnings relative to incorrect static access</li>
<li><font color="green">super</font> to suppress warnings relative to overriding a method without super invocations</li>
<li><font color="green">synthetic-access</font> to suppress warnings relative to unoptimized access from inner classes</li>
<li><font color="green">unchecked</font> to suppress warnings relative to unchecked operations</li>
<li><font color="green">unqualified-field-access</font> to suppress warnings relative to field access unqualified</li>
<li><font color="green">unused</font> to suppress warnings relative to unused code and dead code</li>
</ul>
</body>
</html>


