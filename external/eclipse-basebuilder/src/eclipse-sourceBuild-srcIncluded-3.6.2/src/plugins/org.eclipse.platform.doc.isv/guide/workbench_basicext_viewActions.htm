<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en">
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>org.eclipse.ui.viewActions</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H3>
org.eclipse.ui.viewActions</H3>

<P >
It is common for plug-ins to contribute behavior to views that already exist in the workbench. This is done through the
<b><a href="../reference/extension-points/org_eclipse_ui_viewActions.html"> org.eclipse.ui.viewActions</a></b> 
extension point. This extension point allows plug-ins to contribute menu items, submenus and tool bar entries to an
existing view's local
pull-down menu and local tool bar. </P>
<p>
Contributing menu items to views is also done using the 
<b><a href="../reference/extension-points/org_eclipse_ui_menus.html">org.eclipse.ui.menus</a></b>
extension point.  This allows command targeted at a view to be contributed to
an existing view's local pull-down menu and local tool bar, as in the <b>Contribution location</b> section
covering the Info View of <a href="workbench_cmd_menus.htm" class="XRef">org.eclipse.ui.menus</a>.
</p>
<P >
You may have noticed an item in the project explorer's local tool bar that becomes
enabled whenever a readme file is selected. This item also appears in the
project explorer's local
pull-down menu. These actions appear because the readme tool plug-in contributes
them using the
<b> viewActions</b> extension.</P>

<img src="images/readmeviewaction.png" alt="" border="0">
<P >
The relevant <b> plugin.xml</b> contribution is below.</P>
<pre>
&lt;extension
    point = &quot;org.eclipse.ui.viewActions&quot;&gt;
      &lt;viewContribution 
         id=&quot;org.eclipse.ui.examples.readmetool.vc1&quot; 
         targetID=&quot;org.eclipse.ui.navigator.ProjectExplorer&quot;&gt;        
	   &lt;action id=&quot;org.eclipse.ui.examples.readmetool.va1&quot; 
              label=&quot;%PopupMenu.ResourceNav.label&quot; 
	      menubarPath=&quot;additions&quot;
              toolbarPath=&quot;additions&quot; 
              icon=&quot;icons/obj16/editor.png&quot; 
              tooltip=&quot;%PopupMenu.ResourceNav.tooltip&quot; 
   	      helpContextId=&quot;org.eclipse.ui.examples.readmetool.view_action_context&quot;
              class=&quot;org.eclipse.ui.examples.readmetool.ViewActionDelegate&quot; 
              enablesFor=&quot;1&quot;&gt; 
		&lt;selection class=&quot;org.eclipse.core.resources.IFile&quot; name=&quot;*.readme&quot;/&gt; 
	   &lt;/action&gt;
      &lt;/viewContribution&gt;
 &lt;/extension&gt;
</pre>
<P >
A view contribution with a unique id is specified. The view to which we are adding
the action is specified in the
<b> targetID</b>. We are contributing to the Project
Explorer's menu.&nbsp; We specify the label and the menu bar and
tool bar locations for the new action.&nbsp; (For a complete discussion of menu and toolbar locations, see
<a HREF="workbench_menupaths.htm" CLASS="XRef"> Menu and toolbar paths</a>). </P>
<P >
We also specify the conditions under which the action should be enabled. You can see that this action will be enabled when there is one selection
(<b>enablesFor=&quot;1&quot;</b>) of type
<b><a href="../reference/api/org/eclipse/core/resources/IFile.html">IFile</a>
(class=&quot;org.eclipse.core.resources.IFile&quot;)</b>, whose name has
&quot;<b>.readme</b>&quot; in the file extension (<b>name=&quot;*.readme&quot;</b>). Sure enough, that's exactly what happens when you click around in the Project Explorer.&nbsp;&nbsp;</P>
<P >
The information in the <b> plugin.xml</b> is all that's needed to add items to menus and tool
bars since plug-in code will only run when the action is actually selected from the menu or toolbar.
To provide the action behavior, the implementation class specified in the
<b> plugin.xml</b> must implement the <b><a href="../reference/api/org/eclipse/ui/IViewActionDelegate.html"> IViewActionDelegate</a></b> interface. </P>
<P >
In this example, the readme plug-in supplies <b> ViewActionDelegate</b> to implement the action. If you browse this class you will see that it includes methods for
remembering its view, handling selection changes, and invoking its action.&nbsp;
When invoked the action itself simply launches a dialog that announces it was executed.</P>
<pre>
public void run(org.eclipse.jface.action.IAction action) {
	MessageDialog.openInformation(view.getSite().getShell(),
		MessageUtil.getString(&quot;Readme_Editor&quot;),  
		MessageUtil.getString(&quot;View_Action_executed&quot;)); 
}</pre>
<P >
Although this action is simple, we can imagine how using selections and more
functional dialogs could make this action do something more interesting.</P>





</BODY>
</HTML>
