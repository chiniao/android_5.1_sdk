<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en">
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>org.eclipse.ui.editorActions</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H3>
org.eclipse.ui.editorActions</H3>

<P >
We've just seen how editors
can contribute their own actions to the workbench menus and tool bar when they
become active.&nbsp; The <b><a href="../reference/extension-points/org_eclipse_ui_editorActions.html">org.eclipse.ui.editorActions</a></b> extension
point allows a plug-in to add
to the workbench menus and tool bar when another plug-in's editor becomes active.</P>
<P >
In the readme example, the plug-in uses the <b>editorActions</b>
extension point to contribute additional actions to the menu contributed by the
readme editor. The definition in our
<b> plugin.xml</b> should look pretty familiar by now.</P>
<pre>
&lt;extension
    point = &quot;org.eclipse.ui.editorActions&quot;&gt;
      &lt;editorContribution 
         id=&quot;org.eclipse.ui.examples.readmetool.ec1&quot; 
         targetID=&quot;org.eclipse.ui.examples.readmetool.ReadmeEditor&quot;&gt;        
	   &lt;action id=&quot;org.eclipse.ui.examples.readmetool.ea1&quot; 
              label=&quot;%Editors.Action.label&quot; 
              toolbarPath=&quot;ReadmeEditor&quot; 
              icon=&quot;icons/obj16/editor.png&quot; 
              tooltip=&quot;%Editors.Action.tooltip&quot; 
              class=&quot;org.eclipse.ui.examples.readmetool.EditorActionDelegate&quot;
              definitionId=&quot;org.eclipse.ui.examples.readmetool.ea1&quot;
              /&gt; 
      &lt;/editorContribution&gt;
 &lt;/extension&gt;</pre>
<P >Similar to a view action, the extension must specify the <b> targetID</b> of the
editor to which it is contributing actions.&nbsp; The action itself is very
similar to a view action (<b>id</b>, <b>label</b>, <b>icon</b>, <b>toolbarPath</b>,
...), except that the specified class
must implement <b><a href="../reference/api/org/eclipse/ui/IEditorActionDelegate.html">IEditorActionDelegate</a></b>
and a <b>definitionId</b> can be specified to link this action to a Command specified 
by the <b><a href="../reference/extension-points/org_eclipse_ui_commands.html">org.eclipse.ui.commands</a></b>
extension, which is important for keybinding.  
See <a href="wrkAdv_keyBindings_actionDef.htm" class="XRef">Associating actions to commands</a>
and <a href="workbench_cmd_commands.htm" class="XRef">org.eclipse.ui.commands</a> for
defining commands.</P>
<P >Note that a menu bar path is not specified in this markup.&nbsp; Therefore,
the action will appear in the workbench tool bar when the editor is active,
but not in the workbench menu bar.&nbsp; (See <a HREF="workbench_menupaths.htm" CLASS="XRef"> Menu and toolbar paths</a> for a discussion of toolbar and menu paths.)</P>
<P >Sure enough, when the editor is active, we see our editor action on the tool
bar next to the actions that were contributed by the editor itself.</P>
<P ><img src="images/editorAction.png" alt="Editor action appears next to original editor contributions in workbench toolbar" border="0" ></P>
<P >
The readme tool supplies <b> EditorActionDelegate</b>
to implement the action.&nbsp; This class is very similar to the view action delegate
we saw earlier.</P>

<pre>
public void run(IAction action) {
	MessageDialog.openInformation(editor.getSite().getShell(),
		MessageUtil.getString(&quot;Readme_Editor&quot;),  
		MessageUtil.getString(&quot;Editor_Action_executed&quot;)); 
}</pre>



</BODY>
</HTML>
