<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en">
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Menu and toolbar paths
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">

<h2>
Menu and toolbar paths</h2>
<P >
We've seen many action contributions that specify the path for the location of their action. Let's take a close look at what these paths mean.&nbsp;&nbsp;</P>

<h3 >
Menu paths</h3>

<P >
We'll look at menu paths first by looking at the workbench <b>Help</b> menu.</P>

<H4>
Named groups in the workbench</H4>
<P >
The locations for inserting new menus and menu items are defined using named groups. You can think of
a named group as a slot or placeholder that allows you to insert your menu items
at certain points in a menu bar or pulldown menu.</P>
<P >
The workbench defines all of its group slot names in the classes <b><a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html">IWorkbenchActionConstants</a></b>
and <b><a href="../reference/api/org/eclipse/ui/ide/IIDEActionConstants.html">IIDEActionConstants</a></b>. 
(Two different classes are used since resource-related menu items are factored out of the generic workbench).
For each workbench menu, named groups are placed in the menu at locations where it is expected that
plug-ins will insert new actions.</P>
<P >
The following description of the help menu is adapted from the <a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html"><b> IWorkbenchActionConstants</b></a>
class definition.</P>
<pre>
   Standard Help menu actions
   Start group - HELP_START - &quot;start&quot;
   End group - HELP_END - &quot;end&quot;
</pre>
<P >
The standard workbench help menu defines a named group called &quot;<b>start</b>,&quot; followed by a named group called &quot;<b>end</b>,&quot;.
Defining two groups gives plug-ins a little more control over where their contributed
items will be positioned within the help menu.&nbsp; When you define a menu, you can define as many slots as you like. Adding more slots gives 
other plug-ins more control over where their contributions appear relative to existing contributions. </P>
<P >
Plug-ins that add a menu item to the help menu can use these group names to decide where their
menu item will go.  For example, the cheatsheet plug-in adds an action
set containing the &quot;Cheat Sheets...&quot; menu to the workbench.&nbsp; Here's
the markup from the <b>org.eclipse.ui.cheatsheets</b> plug-in's
<b>plugin.xml</b>. </P>
<pre>
&lt;extension
	point="org.eclipse.ui.actionSets"&gt;
	&lt;actionSet
		label="%CHEAT_SHEETS"
		visible="true"
		id="org.eclipse.ui.cheatsheets.actionSet"&gt;
		&lt;action
			label="%CHEAT_SHEETS_MENU"
			class="org.eclipse.ui.internal.cheatsheets.actions.CheatSheetHelpMenuAction"
			<b>menubarPath="help/helpStart"</b>
			id="org.eclipse.ui.cheatsheets.actions.CheatSheetHelpMenuAction"&gt;
		&lt;/action&gt;
	&lt;/actionSet&gt;
&lt;/extension&gt;
</pre>
<P >
The new help action will be placed in the help menu, inside the <b>helpStart</b> group.</P>


<H4>
Fully qualified menu paths</H4>
<P >
 A complete menu path is simply &quot;menu name/group
 name.&quot;&nbsp; Most menu names for the workbench are defined in
<b><a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html">IWorkbenchActionConstants</a></b>. 
(Resource-related menu names are defined in <b><a href="../reference/api/org/eclipse/ui/ide/IIDEActionConstants.html">IIDEActionConstants</a></b>.)
If we look for the name of the help menu in this class, we'll find
that the fully qualified path name for our help action is
 &quot;<b>help/helpEnd</b>.&quot; </P>
<P >
Some menus have nested submenus. This is where longer paths come into play. If the help menu had defined a submenu 
called &quot;<b>submenu</b>&quot; with a named group called &quot;<b>submenuStart</b>,&quot; 
then the fully qualified menu path for an action in the new submenu would be 
&quot;<b>help/submenu/submenuStart</b>.&quot;</P>


<H4>
<a name="workbench_menus_nls">
Externalizing UI labels</a></H4>
<p>The example above demonstrates a technique for externalizing strings
that appear in the UI.&nbsp; Externalized strings are used to make translating the plug-in's UI to
other languages simpler.&nbsp; We can externalize the strings in our <b>plugin.xml
</b>files by replacing the string with a key (<b>%CHEAT_SHEETS_MENU</b>) and creating entries in the <b>plugin.properties</b>
file of the form:</p>
<pre>
	CHEAT_SHEETS_MENU = Cheat Sheets...
</pre>
<P >
The <b>plugin.properties</b> file can be
translated for different languages and the <b>plugin.xml</b>
will not need to be modified.</P>


<H4>
Adding new menus and groups</H4>
<P >
In many of the examples we've seen so far, the actions contributed by the sample plug-ins have been added to existing named groups within menus.</P>
<P >
The <b><a href="../reference/extension-points/org_eclipse_ui_menus.html">menus</a></b> extension point
allows you to contribute to your menus using an alternative placement syntax, menu ids.
The <b><a href="../reference/extension-points/org_eclipse_ui_actionSets.html">actionSets</a></b>,
<b><a href="../reference/extension-points/org_eclipse_ui_viewActions.html">viewActions</a></b>,
<b><a href="../reference/extension-points/org_eclipse_ui_editorActions.html">editorActions</a></b>, and
<b><a href="../reference/extension-points/org_eclipse_ui_popupMenus.html"> popupMenus</a></b> extension points also allow you to define new menus and groups within your contribution. This means that you can define new submenus or new
pull-down menus and contribute your actions to these new menus. In this case, the path for your new action will contain the name of your newly defined menu. </P>
<P>
We saw this technique when the readme tool defined a new menu for its action
set.&nbsp; Let's look at the markup one more time now that we've looked at menu
paths in more detail. </P>
<pre>
   &lt;extension point = &quot;org.eclipse.ui.actionSets&quot;&gt;
   &lt;actionSet id=&quot;org_eclipse_ui_examples_readmetool_actionSet&quot;
	   label=&quot;%ActionSet.name&quot;
	   visible=&quot;true&quot;&gt;
	   &lt;<b>menu id=&quot;org_eclipse_ui_examples_readmetool&quot;</b>
		   label=&quot;%ActionSet.menu&quot;
		   <b>path=&quot;window/additions&quot;</b>&gt; 
		   &lt;separator name=&quot;slot1&quot;/&gt;
		   &lt;separator name=&quot;slot2&quot;/&gt;
		   &lt;separator name=&quot;slot3&quot;/&gt;
	   &lt;/menu&gt;
	   &lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeAction&quot;
		   <b>menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;</b>
		   toolbarPath=&quot;readme&quot;
		   label=&quot;%ReadmeAction.label&quot;
		   tooltip=&quot;%ReadmeAction.tooltip&quot;
		   helpContextId=&quot;org.eclipse.ui.examples.readmetool.open_browser_action_context&quot;
		   icon=&quot;icons/ctool16/openbrwsr.png&quot;
		   class=&quot;org.eclipse.ui.examples.readmetool.WindowActionDelegate&quot;
		   enablesFor=&quot;1&quot;&gt;
		   &lt;selection class=&quot;org.eclipse.core.resources.IFile&quot;
				name=&quot;*.readme&quot;&gt;
		   &lt;/selection&gt;
	   &lt;/action&gt;
	   ...
</pre>
<P >We added a new menu called&nbsp; &quot;<b>org_eclipse_ui_examples_readmetool</b>&quot;
whose label is defined in by the key &quot;<b>%ActionSet.name</b>&quot; in the
properties file. Within this menu, we define three named
groups:&nbsp; &quot;<b>slot1</b>,&quot; &quot;<b>slot2</b>,&quot;
and &quot;<b>slot3</b>.&quot;&nbsp; We add this new
menu to the path &quot;<b>window/additions</b>.&quot;</P>
<P >If we go back to <b><a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html">IWorkbenchActionConstants</a></b>,
we see this definition of the window menu in the javadoc:</P>
<pre>
    * &lt;h3&gt;Standard Window menu actions&lt;/h3&gt;
    * &lt;ul&gt;
    * &lt;li&gt;Extra Window-like action group (&lt;code&gt;WINDOW_EXT&lt;/code&gt;)&lt;/li&gt; 
</pre>
<P >
If we look further at the class definition, we will see these related
definitions: </P>


<pre>
   public static final String MENU_PREFIX = &quot;&quot;;
   ...
   public static final String M_WINDOW = MENU_PREFIX+&quot;window&quot;;
   ...
   public static final String MB_ADDITIONS = &quot;additions&quot;;  // Group.
   ...
   public static final String WINDOW_EXT = MB_ADDITIONS;   // Group.
</pre>


<P >
From this information, we can piece together the path for adding something to
the workbench &quot;Window&quot; menu.&nbsp; The menu itself is called &quot;<b>window</b>&quot;
and it defines one slot called &quot;<b>additions</b>.&quot;&nbsp;
We use the path &quot;<b>window/additions</b>&quot; to
add our new menu. </P>


<P >
In the action set declaration, we add an action to our newly defined menu, using
the path &quot;<b>window/org_eclipse_ui_examples_readmetool/slot1</b>.&quot; </P>


<P >
<img src="images/readmeactionsetmenu.png" alt="" border="0"> </P>


<P >Other plug-ins could add to our menu by using this same path (or perhaps one
of the other slots) to add one of their own menus.&nbsp;&nbsp; </P>


<P >In the readme tool example, we use the <b>separator</b> attribute to
identify the group names.&nbsp; This will cause a separator line to appear
between these groups when they contain items.&nbsp; We could instead use the <b>groupMarker</b>
attribute if we want to define a named group without showing any separators in
the menu to distinguish between the groups. </P>


<h3 >Tool bar paths </h3>


<p>Tool bar paths work similarly to menu paths.&nbsp;&nbsp;</p>


<h4>Named tool bars in the workbench</h4>


<p>The workbench tool bar is composed of
tool bars contributed by different plug-ins, including the workbench
itself.&nbsp; Within any particular tool bar, there are named groups or slots that can be used for inserting new tool bar items.
&nbsp;&nbsp;&nbsp;</p>
<P >
The following description of the workbench tool bars is adapted from the <a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html"><b> IWorkbenchActionConstants</b></a>
class definition.</P>
<pre>// Workbench toolbar ids
public static final String TOOLBAR_FILE = &quot;org.eclipse.ui.workbench.file&quot;
public static final String TOOLBAR_NAVIGATE = &quot;org.eclipse.ui.workbench.navigate&quot;; 

// Workbench toolbar group ids.  To add an item at the beginning of the group, 
// use the GROUP id.  To add an item at the end of the group, use the EXT id.
public static final String PIN_GROUP = &quot;pin.group&quot;; 
public static final String HISTORY_GROUP = &quot;history.group&quot;; 
public static final String NEW_GROUP = &quot;new.group&quot;; 
public static final String SAVE_GROUP = &quot;save.group&quot;; 
public static final String BUILD_GROUP = &quot;build.group&quot;; </pre>
<p>In the simplest case, a plug-in can contribute a tool bar item in its own
tool bar.&nbsp; For example, the readme tool actions contributed to the menu are
also given a tool bar path:  </p>
<pre>
&lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeAction&quot;&nbsp;&nbsp;
   menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;
&nbsp;&nbsp; <b>toolbarPath=&quot;readme&quot;
</b>...</pre>
<p>Since there is no reference to the workbench tool bar paths or groups, the
readme actions appear in their own group on the tool bar.&nbsp; Specifying the
following path would instead place the item in the file tool bar in the save
group:</p>
<pre>...
&lt;action id=&quot;org_eclipse_ui_examples_readmetool_readmeAction&quot;&nbsp;&nbsp;
   menubarPath=&quot;window/org_eclipse_ui_examples_readmetool/slot1&quot;
&nbsp;&nbsp; <b>toolbarPath=&quot;org.eclipse.ui.workbench.file/save.group&quot;
</b>...</pre>
<p>The paths defined in <a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html"><b> IWorkbenchActionConstants</b></a>
 may be referenced in the tool bar paths of other plug-ins.</p>
<h4>Adding to action sets of another plug-in</h4>
<p>Suppose a plug-in wants its tool bar items better integrated with actions
from a different plug-in?&nbsp; Let's look at how the external
tools plug-in (<b>org.eclipse.ui.externaltools</b>) integrates its action with the debugger tool bar.&nbsp; The
debugger (<b>org.eclipse.debug.ui</b>) defines its tool bar actions like this:</p>
<pre>&lt;extension
      point=&quot;org.eclipse.ui.actionSets&quot;&gt;
   &lt;actionSet
         label=&quot;%LaunchActionSet.label&quot;
         visible=&quot;false&quot;
         id=&quot;org.eclipse.debug.ui.launchActionSet&quot;&gt;
   ...
   &lt;action
         <b>toolbarPath=&quot;debug&quot;</b>
         id=&quot;org.eclipse.debug.internal.ui.actions.RunDropDownAction&quot;
         hoverIcon=&quot;icons/full/ctool16/run_exc.png&quot;
         class=&quot;org.eclipse.debug.internal.ui.actions.RunToolbarAction&quot;
         disabledIcon=&quot;icons/full/dtool16/run_exc.png&quot;
         icon=&quot;icons/full/etool16/run_exc.png&quot;
         helpContextId=&quot;run_action_context&quot;
         label=&quot;%RunDropDownAction.label&quot;
         pulldown=&quot;true&quot;&gt;
   &lt;/action&gt;
   ...</pre>
<p>Just like the readme tool, the debugger plug-in defines its own tool bar
path, which means its tool bar items will be inside their own tool bar on the
workbench.&nbsp; What does the external tools plug-in do?</p>
<pre>&lt;extension point=&quot;org.eclipse.ui.actionSets&quot;&gt;
	&lt;actionSet
		id=&quot;org.eclipse.ui.externaltools.ExternalToolsSet&quot;
		label=&quot;%ActionSet.externalTools&quot;
		visible=&quot;true&quot;&gt;
		...
		&lt;action
			id=&quot;org.eclipse.ui.externaltools.ExternalToolMenuDelegateToolbar&quot;
			definitionId= &quot;org.eclipse.ui.externaltools.ExternalToolMenuDelegateToolbar&quot;
			label=&quot;%Action.externalTools&quot;
			<b>toolbarPath=&quot;org.eclipse.debug.ui.launchActionSet/debug&quot;</b>
			disabledIcon=&quot;icons/full/dtool16/external_tools.png&quot;
			icon=&quot;icons/full/etool16/external_tools.png&quot;
			hoverIcon=&quot;icons/full/ctool16/external_tools.png&quot;
			tooltip=&quot;%Action.externalToolsTip&quot;
			pulldown=&quot;true&quot;
			class=&quot;org.eclipse.ui.externaltools.internal.menu.ExternalToolMenuDelegate&quot;&gt;
		&lt;/action&gt;
	&lt;/actionSet&gt;
&lt;/extension&gt;</pre><p>Note the use of the action set ID of the
debugger in the tool bar path.&nbsp; Using an action set ID in the path denotes
that the tool bar item should be placed in the tool bar used by the referenced
action set.&nbsp;  Within a toolbar group, items are ordered by action set id, so
for our example, the external tools action will appear after the debugger actions.&nbsp;</p>
<p>When adding to an action set's tool bar, new groups can also be defined.&nbsp;
If the external tools plug-in defined its <b> toolbarpath</b> as 
<b>&quot;org.eclipse.debug.ui.launchActionSet/external&quot;</b> a new group would be created 
for the action on the tool bar.&nbsp;  As with menus, tool bar groups are delineated by separators.&nbsp;</p>
<h3 >Using paths from another plug-in </h3>


<P >In general, it's not good practice to contribute to another plug-in's menu
or tool bar by deriving the path name from the <b>plugin.xml</b> unless it has
been marked specifically as being available for clients.&nbsp; It's possible that a future version of the plug-in could change the names of the
paths.&nbsp; Two common ways to mark your plug-in's action set ids and paths as
fair game are: </P>


<ul>
  <li>annotate the XML with comments that explicitly mark the menu path or
    action set as usable by clients</li>
  <li>define a public interface (much like <b><a href="../reference/api/org/eclipse/ui/IWorkbenchActionConstants.html">IWorkbenchActionConstants</a></b>)
which specifies exactly which menus, tool bar groups, and slots are considered
fair game for use by other plug-ins</li>
</ul>





</BODY>
</HTML>
