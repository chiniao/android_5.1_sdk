<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta name="copyright"
	content="Copyright (c) IBM Corporation and others 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page."/>
<meta http-equiv="Content-Language" content="en-us"/>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
<title>PDE - What's New in 3.6</title>
<link rel="stylesheet" href="../book.css" type="text/css"/>
<style type="text/css">
td {
	border-top: solid thin black;
}

img[alt] {
	background-color: #ffdddd;
}

tr {
	vertical-align: top;
}
</style>
</head>
<body>
<h2>What's New in 3.6 (PDE)</h2>
<p>Here are descriptions of some of the more interesting or
significant changes made to the Plug-in Development Environment (PDE)
for the 3.6 release of Eclipse, grouped into:</p>
<ul>
	<li><a href="#ViewsAndEditors">Views and Editors</a></li>
	<li><a href="#Launching">Launching</a></li>
	<li><a href="#TargetPlatform">Target Platform </a></li>
	<li><a href="#Export">Import and Export</a></li>
	<li><a href="#APITooling">API Tooling</a></li>
	<li><a href="#Build">Build</a></li>
</ul>
<!-- ****************** START OF N&N TABLE ****************** -->
<table cellpadding="10" cellspacing="0" width="600">
	<tr>
		<td colspan="2">
		<h2><a name="ViewsAndEditors">Views and Editors </a></h2>
		</td>
	</tr>
	
	<tr id="osgiconsole">
		<td align="left" valign="top" width="30%"><b>OSGi console </b></td>
		<td valign="top" width="70%">An OSGi console is now available to
		interact with the running framework. Use the <b>Open Console</b> drop
		down action in the <b>Console View</b> to open a <b>Host OSGi Console</b>.
		<p><img alt="Open an OSGi console to interact with the running framework" title="Open Host OSGi Console"
			src="images/console-menu.png" /><br />
		<br />
		</p>
		<p>You can then enter OSGi commands into the console to interact
		directly with the framework running the IDE.</p>
		</td>
	</tr>

	<tr id="pde-xml-errors">
		<td width="30%" valign="top" align="left"><b>XML error
		reporting in context help and table of contents editors</b></td>
		<td width="70%" valign="top">The context help editor and table of
		contents editor now report XML errors.
		<p><img src="images/xml-errors.png" alt="TOC Editor" /></p>
		</td>
	</tr>

	<tr id="toc.spell.check">
		<td width="30%" valign="top" align="left"><b>Spell checking 
		in context help and table of contents editors</b></td>
		<td width="70%" valign="top">
		<p>Spell checking is now available in the <strong>Table
		of Contents</strong> (TOC) and <strong> Context Help</strong> editors.</p>
		<p><img src="images/spell-check.png"
			alt="Incorrectly spelled works are underlined in red" /></p>
		</td>
	</tr>

	<tr id="buildseverities">
		<td align="left" valign="top" width="30%"><b>Configurable
		problem severities for build.properties </b></td>
		<td valign="top" width="70%">Severities for problems in
		build.properties can now be configured individually via the <b>Preferences
		&gt; Plug-in Development &gt; Compilers</b> preference page. Problem
		severities can also be configured at the project level via a project's
		<b>Properties &gt; Plug-in Development &gt; Plug-in Manifest
		Compiler</b> property page.
		<p><img alt="Severity Settings" title="Severity Settings"
			src="images/build-severities.png" /><br />
		<br />
		</p>
		</td>
	</tr>
	
	<tr id="searchrepos">
		<td align="left" valign="top" width="30%"><b>Search
		repositories quickfix</b></td>
		<td valign="top" width="70%">A new quickfix allows you to
		conveniently search a set of repositories for a missing imported
		package and have a bundle supplying the package added to your target
		platform.
		<p><img alt="Search Repositories Quickfix"
			title="Search Repositories Quickfix" src="images/hover-quick-fix.png" /><br />
		<br />
		</p>
		</td>
	</tr>
	
	<tr id="pdecreateapi">
		<td align="left" valign="top" width="30%"><b>API for plug-in
		project creation</b></td>
		<td valign="top" width="70%">An API is now available to create
		and modify plug-in (bundle) projects. The API provides a description
		of a project's bundle related attributes and allows them to be
		modified declaratively. For example, a bundle's activator, required
		bundles, package exports and imports can be queried and defined. As
		well, the root of bundle (i.e. the folder containing <code>META-INF/MANIFEST.MF</code>)
		can be placed anywhere inside a project (rather than just the root
		project folder). The new API is available in the <code>org.eclipse.pde.core.project</code>
		package of the <code>org.eclipse.pde.core</code> bundle.</td>
	</tr>

	<tr>
		<td colspan="2">
		<h2><a name="Launching">Launching</a></h2>
		</td>
	</tr>

	<tr id="featurelaunch">
		<td align="left" valign="top" width="30%"><b>Feature based
		launch </b></td>
		<td valign="top" width="70%">You can now manage the set of
		plug-ins launched in Eclipse Applications, JUnit
		Plug-in Tests, and OSGi Framework launch configurations
		by selecting a set of features.
		<p><img alt="Feature Based Launching"
			title="Feature Based Launching" src="images/feature-launch.png" />
		</p>
		<p>
		Features from both the workspace and the target can be 
		included.  Individual plug-ins can be added to the launch
		to include plug-ins that are not part of a feature.  PDE
		will launch all the selected plug-ins as well as all required
		plug-ins.
		</p>
		<p><img alt="Add individual plug-ins to a feature based launch"
			title="Add Individual Plug-ins" src="images/add-plugins.png" />
		</p>
		<p>Features in the workspace are used over external features,
		however, this can be configured by un-checking '<b>Use features
		from workspace if available</b>'. Bundles in the workspace are used over
		external bundles in the target platform. However, this can be
		configured by modifying the configuration's default bundle resolution
		policy, or can be configured per feature using the cell editors in the
		'<b>Plug-in Location</b>' column.</p>
		</td>
	</tr>

	<tr id="headless-pde">
		<td width="30%" valign="top" align="left"><b>Headless
		launching support</b></td>
		<td width="70%" valign="top">Launching support for Eclipse
		Applications, JUnit Plug-in Tests, and OSGi Frameworks is provided by
		a new headless plug-in (<code>org.eclipse.pde.launching</code>). This
		allows applications without a user interface to leverage the launch
		support programmatically.</td>
	</tr>

	<tr>
		<td width="30%" valign="top" align="left"><a name="consolelog"
			id="consolelog"></a><b>Console log</b></td>
		<td width="70%" valign="top">By <a
			href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=284704">popular
		demand</a>, <code>-consoleLog</code> is added to new launch configuration
		program arguments by default.
		<p><img src="images/consolelog.png"
			alt="Default program arguments" /></p>
		</td>
	</tr>

	<tr id="generate-profile">
		<td width="30%" valign="top" align="left"><b>Support software
		installation while running and debugging</b></td>
		<td width="70%" valign="top">Launched Eclipse Applications can
		now support software installation operations. When the new option is
		checked (on the <b>Configuration</b> tab of Eclipse Applications), a
		p2 profile is generated when running or debugging. The profile
		initially contains all bundles in the target and can be modified by
		software installation operations. The profile is regenerated on each
		subsequent run or debug session, but is maintained across restart
		operations.
		<p><img src="images/soft-install.png"
			alt="Configuration tab of Eclipse Application" /></p>
		</td>
	</tr>

	<tr>
		<td colspan="2">
		<h2><a name="Export">Import and Export </a></h2>
		</td>
	</tr>

	<tr id="importcvs">
		<td align="left" valign="top" width="30%"><b>Import from CVS
		</b></td>
		<td valign="top" width="70%">The <b>Plug-in Import</b> wizard
		allows you to import projects from CVS corresponding to bundles in the
		target platform. This feature is available for bundles that define the
		<b>Eclipse-SourceReferences</b> header. On the first page of the
		import wizard select the <b>Import As > Projects from a repository</b>
		option.
		<p><img alt="Import from a repository"
			title="Import From Repository" src="images/from-repo.png" />
		</p>
		<p>The second page allows you to choose from all bundles with
		source repository information. Select the bundles you want to import
		and press <b>Next</b>.</p>
		<p><img alt="Select bundles to import"
			title="Select Bundles to Import" src="images/avail.png" />
		</p>
		<p>The last page of the wizard allows you to import the specific
		versions of the bundles used in the target platform or from HEAD.
		Pressing <b>Finish</b> will import the projects into your workspace.</p>
		<p><img alt="Select Version" title="Select Version"
			src="images/head-version.png" />
		</p>
		<p>You can also import projects from the <b>Plug-ins</b> view. Use the <b>Import As &gt; Project from a Repository...</b> action
		to import plug-ins from CVS. 
		</p>
		<p><img alt="Import plug-in projects from CVS" title="Import plug-in projects from CVS"
			src="../guide/images/tasks/import-from-plugins-view.png" />
		</p>
		</td>
	</tr>

	<tr id="exporttarget">
		<td align="left" valign="top" width="30%"><b>Export target
		content </b></td>
		<td valign="top" width="70%">It's now possible to export the
		contents of your current target platform into a destination directory
		via the export active target definition wizard. In the list of export
		wizards (<b>File -> Export...</b>), you'll find the wizard available
		under <b>Plug-in Development -> Target definition</b>.
		<p><img alt="Export Active Target Wizard"
			title="Export Active Target Wizard" src="images/export-target.png" /><br />
		<br />
		</p>
		<p>Note: This will copy all features and plug-ins that are part of
		your currently set target platform to the destination directory.</p>
		</td>
	</tr>
	
	<tr>
		<td colspan="2">
		<h2><a name="TargetPlatform">Target Platform</a></h2>
		</td>
	</tr>

	<tr id="featuretarget">
		<td align="left" valign="top" width="30%"><b>Feature based
		target </b></td>
		<td valign="top" width="70%">You can now manage the set of
		bundles in a target platform by selecting a set of features.
		Additionally, you can select from bundles that are not contained in
		any feature. On a target definition's <b>Content</b> tab select the <b>Manage
		using Features</b> radio button. This provides coarse grained management
		of bundles in a target. When a feature is selected, all bundles in
		that feature are added to the target.
		<p><img alt="Target Based Features" title="Target Based Features"
			src="images/target-features.png" /><br />
		<br />
		</p>
		</td>
	</tr>

	<tr id="pdetargetdialog">
		<td align="left" valign="top" width="30%"><b>Add to target
		platform dialog</b></td>
		<td valign="top" width="70%">The <b>Add Artifact to Target
		Platform</b> dialog (Ctrl+Shift+Alt+A) allows you to quickly search a set
		of repositories for dependencies (bundle, feature or package) to add
		to your current target platform.
		<p><img alt="Add Artifact to Target Platform Dialog"
			title="Add Artifact to Target Platform Dialog"
			src="images/add-to-target.png" /><br />
		<br />
		</p>
		</td>
	</tr>
	
	<tr id="synch-java-search">
		<td width="30%" valign="top" align="left"><b>Synchronize Java
		search with target platform</b></td>
		<td width="70%" valign="top">You can automatically synchronize
		Java search operations with the target platform via the <b>Preferences
		&gt; Plug-in Development</b> preference page.
		<p><img src="images/target-search.png"
			alt="Preferences &gt; Plug-in Development" /></p>
		<p>Java search operations are scoped to workspace projects and
		their dependencies. Developers don't typically have the entire target
		platform in their workspace and thus Java search operations don't
		locate references from many upstream plug-ins. You can manually add
		plug-ins to the Java search path using the <b>Add All Plug-ins to
		Java Search</b> action in the Plug-ins view. However, the new preference
		automatically keeps the search path in synch with the target platform.</p>
		<p>Under the covers a project named <i>External Plug-in
		Libraries</i> is created with all external plug-ins in the target platform
		on its build path.</p>
		</td>
	</tr>

	<tr>
		<td colspan="2">
		<h2><a name="APITooling">API Tooling </a></h2>
		</td>
	</tr>

	<tr id="pde-api-deprecation">
		<td width="30%" valign="top" align="left"><b>Compare with
		baseline now reports deprecations</b></td>
		<td width="70%" valign="top">When performing <b>Compare With
		&gt; API Baseline...</b>, deprecation changes are now reported. This
		allows you to quickly identify what has been deprecated between two
		releases of a project.
		<p><img src="images/api-deprecation.png" alt="TOC Editor" /></p>
		</td>
	</tr>

	<tr id="api.use.scans">
		<td width="30%" valign="top" align="left"><b>API use reports
		</b></td>
		<td width="70%" valign="top">
		<p>You can generate reports describing what API and internals are
		being used by other bundles. API use reports have been integrated as
		an external tool (<strong>Run &gt; External Tools &gt;
		External Tool Configurations...</strong>). For example, the following report
		settings are used to generate a report revealing which internal
		components of the debug platform are being consumed by JDT.</p>
		<p><img src="images/api-scan.png" alt="API use report settings" />
		</p>
		<p>A report is run against a set of bundles which can be specified
		as an API baseline, a target definition or a directory of bundles. You
		can search for API and/or internal references and you can limit the
		report to specific bundles by using regular expressions. You must
		specify an output location (directory) for the report and whether to
		generate HTML.</p>
		<p>Package exports in bundle manifests are used to determine
		package visibility. Any package exports with an <em>x-internal</em> or
		<em>x-friends</em> modifier will be considered internal. All other
		packages are considered API. The <strong>Patterns</strong> tab can be
		used to augment package visibility information by specifying regular
		expressions to identify packages, and whether those packages should be
		considered API or internal. For example, since TPTP specifies all
		packages as API, the following patterns could be used to identify its
		internal packages.</p>
		<p><img src="images/patterns.png"
			alt="Specify package visibility using the patterns tab" /></p>
		</td>
	</tr>

	<tr id="apireports">
		<td align="left" valign="top" width="30%"><b>Customize API
		use scan reports </b></td>
		<td valign="top" width="70%">A new wizard helps you customize API
		use reports. From the <b>Patterns</b> tab of an <b>API Use Report</b>
		launch configuration (available via External Tools), press the <b>Add</b>
		button to open the wizard and create custom pattern filters.
		<p><img alt="API Pattern Wizard" title="API Pattern Wizard"
			src="images/api-filters.png" />
		</p>
		<p>An <b>Archive Pattern</b> allows specific jars within bundles
		to be omitted from the scan. A <b>Package Pattern</b> allows you to
		specify which packages should be considered API or non-API (override
		visibility definitions in bundle manifests). A <b>Report
		Conversion Pattern</b> allows specific references to be filtered from the
		final report. You can filter references from or to locations based on
		regular expressions.</p>
		</td>
	</tr>

	<tr id="build-properties">
		<td width="30%" valign="top" align="left"><b>Enhanced
		build.properties validation</b></td>
		<td width="70%" valign="top">Redundant entries in source builds
		are now flagged with a warning by default.
		<p><img src="images/src-builds.png" alt="Source folder validation" /></p>
		</td>
	</tr>

	<tr>
		<td width="30%" valign="top" align="left"><a
			name="usescanpatterntab" id="usescanpatterntab"></a><b>API use
		report filters</b></td>
		<td width="70%" valign="top">You can now add filter patterns to
		API use reports to constrain what references are reported. This
		feature is available in UI and in API tooling Ant tasks. When you
		press <b>Add</b> on the <b>Patterns</b> tab a wizard allows you to
		craft a variety of patterns. An archive pattern is used to skip
		specific jars. A package pattern is used to define a package as API or
		internal (to override a bundle manifest). A report conversion pattern
		is used to skip specific references during report creation (by
		specifying a regular expression of reference origins to skip).
		<p><img src="images/pattern-wizard.png"
			alt="Create new patterns using the convenient wizard" /></p>
		<p>For example, to use an archive pattern to filter references
		from specific archives within bundles, select <b>Archive Pattern</b>
		and press <b>Next</b>. The wizard allows you to easily craft an
		archive pattern.</p>
		<p><img src="images/archive-wizard.png"
			alt="Create a new archive pattern using the convenient wizard" /></p>
		<p>When you press <b>Finish</b> the pattern appears in the <b>Patterns</b>
		table.</p>
		<p><img src="images/archive.png" alt="Archive pattern" /></p>
		</td>
	</tr>

	<tr>
		<td width="30%" valign="top" align="left"><a name="meta-data"
			id="meta-data"></a><b>API use report details</b></td>
		<td width="70%" valign="top">You can now provide comments to
		accompany an API use report, which will show up in the reports as
		additional information along with the scan parameters for reference.
		This feature is available in the UI and in API tooling Ant tasks.
		<p><img src="images/description.png" alt="Scan description" /></p>
		<p>The resulting report could look like the following.</p>
		<p><img src="images/scandetails.png"
			alt="Sample use scan details report header." /></p>
		</td>
	</tr>

	<tr>
		<td colspan="2">
		<h2><a name="Build">Build </a></h2>
		</td>
	</tr>

	<tr id="error-options">
		<td width="30%" valign="top" align="left"><b>Enhanced
		compiler error options for PDE build</b></td>
		<td width="70%" valign="top">PDE/Build can now take advantage of
		new support from the JDT compiler to specify that certain warnings
		should instead be reported as errors.
		<p>Set the property <tt>javacErrors.&lt;library&gt;</tt> in your
		build.properties. Similar to the <tt>javacWarnings.&lt;library&gt;</tt>
		property, specify the <a
			href="../../org.eclipse.jdt.doc.isv/guide/jdt_api_compile.htm">warnings</a>
		that should be reported as errors:</p>
		<pre>
    	javacErrors.. = forbidden,discouraged,
    	javacErrors.library.jar = deprecation,nullDereference
    	</pre></td>
	</tr>

	<tr>
		<td width="30%" valign="top" align="left"><a
			name="buildproperties" id="buildproperties"></a><b>Synchronize
		project settings with PDE build</b></td>
		<td width="70%" valign="top">To ensure PDE will export and build
		your project with the same settings as in the workspace there are new
		checks to synchronize project specific compiler and build path
		settings with <code>build.properties</code>. The following validations
		are performed and quick fixes are provided for any problems.
		<ul>
			<li>Compiler compliance, source and target levels match <code>jre.compliance.profile</code>,
			<code>javacSource</code>, and <code>javacTarget</code> properties
			(only required when compiler settings do not match default settings
			for a bundle's required execution environment).</li>
			<li>Folders in <code>source.&lt;library&gt;</code> exist, are
			source folders on the Java build path, and are not duplicated.</li>
			<li>Folders in <code>output.&lt;library&gt;</code> exist, are
			output folders or class file folders on the Java build path, and are
			not duplicated.</li>
			<li>Each <code>output.&lt;library&gt;</code> entry contains all
			output locations of its corresponding source folders on the Java
			build path.</li>
			<li>Source folders targeted to different libraries do not share
			the same output location.</li>
			<li>Source folders are not included in <code>src.includes</code>
			entries (they are included by default).</li>
			<li>Additionally, a check can be performed to ensure an <code>output.&lt;library&gt;</code>
			exists for each <code>source.&lt;library&gt;</code> entry. By
			default, this problem is ignored but can be turned on via <b>Preferences
			&gt; Plug-in Development &gt; Compilers</b> (or project specific <b>Properties
			&gt; Plug-in Development &gt; Plug-in Manifest Compiler</b>). This option
			is useful when using the PDE option to export existing class files
			from the workspace.</li>
		</ul>
		<p><img src="images/buildproperties.png"
			alt="Build.properties validation" /></p>
		</td>
	</tr>

	<tr id="pdebuildsynch">
		<td align="left" valign="top" width="30%"><b>Synchronize
		project settings with PDE build</b></td>
		<td valign="top" width="70%">It's easier to synchronize your
		project specific compiler settings and file encoding settings with PDE
		build. Two new options appear in the <b>Build</b> section of the <b>Preferences
		> Plug-in Development > Compilers </b> preference page. By default the new
		options are set to <b>Ignore</b>.
		<p><img alt="Build validation settings"
			title="Build Validation Settings" src="images/synch-settings.png" />
		</p>
		<p>When set to <b>Warning</b> or <b>Error</b> problem markers will
		appear when your project settings are not reflected in <code>build.properties</code>.
		Quick fixes are available to help you synchronize the settings.</p>
		<p><img alt="Warnings" title="Build Validation Warnings"
			src="images/synch-warnings.png" />
		</p>
		<p>A new <code>javacProjectSettings</code> property is supported
		in <code>build.properties</code>. The value can be a project relative
		path to a preference settings file of compiler options supported by
		the JDT compiler, or it can simply by <code>true</code> to indicate
		the default preference file should be used (<code>.settings/org.eclipse.jdt.core.prefs</code>).
		</p>
		</td>
	</tr>
	
	<tr id="bundleCompilerArgs">
		<td align="left" valign="top" width="30%"><b>Plug-in specific
		compiler arguments</b></td>
		<td valign="top" width="70%">A bundle can now specify custom
		compiler arguments to be used in export or releng builds by setting <b><tt>compilerArgs</tt></b>
		in its build.properties file..
		<p>These arguments will be specified in addition to whatever
		general compiler arguments are specified by the releng setup.</p>
		</td>
	</tr>
	
	<tr id="customCompilerAdapter">
		<td align="left" valign="top" width="30%"><b>Custom compiler
		adapters</b></td>
		<td valign="top" width="70%">A bundle can now specify a custom
		ant compiler adapter to be used during export or releng builds. This
		allows for compiling non-java sources such as AspectJ or Groovy
		provided a suitable adapter is available.
		<p>Set <b><tt>compilerAdapter</tt></b> in the bundle's
		build.properties file. As well, set <b><tt>sourceFileExtensions</tt></b>
		to a list of file extensions which should be treated as source and
		automatically copied to generated source bundles.</p>
		</td>
	</tr>

	<tr id="pdeerrors">
		<td align="left" valign="top" width="30%"><b>Improved error
		reporting from PDE build</b></td>
		<td valign="top" width="70%">A new <code>prereqErrors.log</code>
		file is generated by PDE build. The file helps locate bundles lowest
		on the stack with compilation errors. An entry is added for each
		bundle with build errors describing any prerequisite bundles that
		contained compile errors. Entries are added in the order bundles are
		compiled. For example:
		<p><code> org.eclipse.debug.ui_3.6.0.201004141459: the
		following prerequisites contain compile errors<br />
		&nbsp;&nbsp;&nbsp;&nbsp;org.eclipse.debug.core_3.6.0.201004141459 </code></p>
		</td>
	</tr>
</table>
</body>
</html>
